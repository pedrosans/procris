#!/usr/bin/env python3
"""
Copyright 2017 Pedro Santos <pedrosans@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import Xlib
import gi
import warnings
import sys
import procris.keyboard
gi.require_version('Gdk', '3.0')
from gi.repository import Gtk, Gdk, GObject, GLib
from Xlib import X
from Xlib.protocol import rq
from procris.keyboard import KeyboardListener

warnings.filterwarnings("ignore", category=DeprecationWarning)
listener = KeyboardListener()


def handler(reply):
	data = reply.data
	while len(data):
		event, data = rq.EventField(None).parse_binary_value(data, listener.recording_connection.display, None, None)

		if event.type == X.KeyRelease:
			print_key_data(event)


# http://python-xlib.sourceforge.net/doc/html/python-xlib_13.html
def print_key_data(event: Xlib.protocol.event.KeyPress):
	print('\nX:')
	print('\tcode: {}'.format(event.detail))
	print('\tmask: {} named: {}'.format(event.state, clean_mask(str(Gdk.ModifierType(event.state)))))
	print('PROCRIS:')

	normalized_mask = procris.keyboard.normalize_state(event.state)
	print('\tnormalized mask: {} named: {}'.format(
		normalized_mask,
		clean_mask(str(Gdk.ModifierType(normalized_mask)))
	))

	_wasmapped, keyval, egroup, level, consumed = Gdk.Keymap.get_default().translate_keyboard_state(
		event.detail, Gdk.ModifierType(event.state), 0)

	print('GDK:')
	print('\tname: {}'.format(Gdk.keyval_name(keyval)))
	print('\twasmapped: {}'.format(_wasmapped))
	print('\tkeyval: {}'.format(keyval))
	print('\tegroup: {}'.format(egroup))
	print('\tlevel: {}'.format(level))
	print('\tconsumed: {}'.format(clean_mask(str(consumed))))


def clean_mask(mask: str):
	return mask.replace('GDK_', '').replace('_MASK', '').replace('<flags ', '').replace(' of type Gdk.ModifierType>', '')


listener.handler = handler
listener.start()
print('ENTER TO STOP THE READING')
sys.stdin.read(1)
listener.stop()
